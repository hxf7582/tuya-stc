C51 COMPILER V9.54   USER_KEY                                                              02/16/2021 21:59:38 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE USER_KEY
OBJECT MODULE PLACED IN .\Obj\User_Key.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE src\User_Key.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\;.\src;.\mcu_sdk)
                    - DEBUG OBJECTEXTEND PRINT(.\List\User_Key.lst) TABS(2) OBJECT(.\Obj\User_Key.obj)

line level    source

   1          /******************************************************************************
   2          文件名称: key.c
   3          文件标识: STC8A8K64S4A12
   4          摘    要: 按键处理函数
   5          当前版本: V1.0  
   6          完成日期: 2021.02.05
   7          *******************************************************************************/
   8          #define USER_KEY_GLOBAL
   9          #include "include.h"
  10          #include "wifi.h"
  11          
  12          uint32_t last_time;
  13          uint8_t Status;
  14          KEY_HANDLE Short_Press_Handle;
  15          KEY_HANDLE Long_Press_Handle;
  16          bit lastButtonState;
  17          
  18          /*****************************************************************************
  19          函数名称 : Key1_ShortPress_Handle
  20          功能描述 : Key1短按处理函数
  21          输入参数 : 无
  22          返回参数 : 无
  23          使用说明 : 无
  24          *****************************************************************************/
  25          static void Key1_ShortPress_Handle(void)
  26          {
  27   1       if(mcu_get_wifi_work_state() == WIFI_CONN_CLOUD)
  28   1        {
  29   2        OLED_DrawBMP(0,0,24,1,UI3);
  30   2        //Get_Voltage();         //读取电池电压
  31   2        LED5=1; 
  32   2        sht30_read();            //读取温湿度   
  33   2        delay_ms(500);
  34   2        OLED_ShowStr(18,0," ",8);
  35   2        }
  36   1      }
  37          /*****************************************************************************
  38          函数名称 : Key1_LongPress_Handle
  39          功能描述 : Key1长按处理函数
  40          输入参数 : 无
  41          返回参数 : 无
  42          使用说明 : 无
  43          *****************************************************************************/
  44          static void Key1_LongPress_Handle(void)
  45          {
  46   1        OLED_ShowStr(36,0,"Reset WiFi",8);
  47   1        mcu_reset_wifi();
  48   1        if((mcu_get_wifi_work_state() == SMART_CONFIG_STATE) || (mcu_get_wifi_work_state() == AP_STATE))
  49   1        {
  50   2          //OLED_ShowStr(40,0,"Reset WiFi",8);
  51   2          
  52   2        }
  53   1        
  54   1      }
C51 COMPILER V9.54   USER_KEY                                                              02/16/2021 21:59:38 PAGE 2   

  55          /*****************************************************************************
  56          函数名称 : key_init
  57          功能描述 : key初始化
  58          输入参数 : 无
  59          返回参数 : 无
  60          使用说明 : 无
  61          *****************************************************************************/
  62          void key_init(void)
  63          {
  64   1        last_time=0;
  65   1        Status=0;
  66   1        lastButtonState=0;
  67   1        //
  68   1        Long_Press_Handle = Key1_LongPress_Handle;
  69   1        //
  70   1        Short_Press_Handle = Key1_ShortPress_Handle;
  71   1      }
  72          /*****************************************************************************
  73          函数名称 : Get_Key_Press_Time
  74          功能描述 : 获取按键按下时间
  75          输入参数 : last_time:上次按下时间
  76          返回参数 : 2次按键之间差值
  77          使用说明 : 无
  78          *****************************************************************************/
  79          static uint32_t Get_Key_Press_Time(uint32_t last_time)
  80          {
  81   1        uint32_t time;
  82   1        
  83   1        time = get_count_value();
  84   1        if(time >= last_time)
  85   1        {
  86   2          time -= last_time;
  87   2        }
  88   1        else
  89   1        {
  90   2          //Time2溢出
  91   2          time += ~last_time;
  92   2        } 
  93   1      
  94   1        return time;
  95   1      }
  96          /*****************************************************************************
  97          函数名称 : key_scan
  98          功能描述 : 扫描按键
  99          输入参数 : 无
 100          返回参数 : 无
 101          使用说明 : 无
 102          *****************************************************************************/
 103          void key_scan(void)
 104          {
 105   1        uint32_t time;
 106   1        if(K2==0)
 107   1            {
 108   2              Key1_LongPress_Handle();
 109   2            }
 110   1        
 111   1        if(K3==0)
 112   1            {
 113   2              LED6=1; 
 114   2            //开关开
 115   2            OLED_ShowStr(122,0," ",8);
 116   2            OLED_ShowStr(110,0,"NO",8);
C51 COMPILER V9.54   USER_KEY                                                              02/16/2021 21:59:38 PAGE 3   

 117   2            mcu_dp_bool_update(DPID_SWITCH,1);  
 118   2            delay_ms(500);
 119   2            }
 120   1        if(K4==0)
 121   1            {
 122   2            LED6=0;  //开关关
 123   2            OLED_ShowStr(110,0,"OFF",8);
 124   2            mcu_dp_bool_update(DPID_SWITCH,0);
 125   2            delay_ms(500);
 126   2            }   
 127   1        
 128   1        switch(Status)
 129   1        {
 130   2          case KEY_NO:
 131   2            //有按键按下
 132   2            if(K1==0)
 133   2            {
 134   3              Status = KEY_DOWN;
 135   3              last_time = get_count_value();
 136   3            }
 137   2            break;
 138   2            
 139   2          case KEY_DOWN:
 140   2            if(K1==1)
 141   2            {
 142   3              Status = KEY_UP;
 143   3              lastButtonState = 0;
 144   3            }
 145   2            break;
 146   2                    
 147   2          case KEY_LONG:
 148   2            if(K1==1)
 149   2            {
 150   3              last_time = 0;
 151   3              Status = KEY_NO;
 152   3              lastButtonState = 0;
 153   3            }
 154   2            break;  
 155   2        }
 156   1      
 157   1        if((Status == KEY_DOWN) || (Status == KEY_LONG))
 158   1        {
 159   2          time = Get_Key_Press_Time(last_time);
 160   2          if(time >= TIME_PRESS_LONG)
 161   2          {
 162   3            //一直长按
 163   3            //last_time = 0;
 164   3            Status = KEY_LONG;
 165   3            if(Long_Press_Handle && (lastButtonState == 0))
 166   3            {
 167   4              Key1_LongPress_Handle();
 168   4              lastButtonState = 1;
 169   4            }
 170   3          }          
 171   2        }
 172   1        else if(Status == KEY_UP)
 173   1        {
 174   2          //松开
 175   2          time = Get_Key_Press_Time(last_time);
 176   2        
 177   2          last_time = 0;
 178   2          Status = KEY_NO;
C51 COMPILER V9.54   USER_KEY                                                              02/16/2021 21:59:38 PAGE 4   

 179   2          if((time >= TIME_PRESS_SHORT) && (time < TIME_PRESS_LONG))
 180   2          {
 181   3            //短按
 182   3            if(Short_Press_Handle && (lastButtonState == 0))
 183   3            {
 184   4              Key1_ShortPress_Handle();
 185   4            }
 186   3          }
 187   2          else if(time >= TIME_PRESS_LONG)
 188   2          {
 189   3            //长按
 190   3            if(Long_Press_Handle && (lastButtonState == 0))
 191   3            {
 192   4              Key1_LongPress_Handle();
 193   4            }
 194   3          }
 195   2          
 196   2        }
 197   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    578    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =     11      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
